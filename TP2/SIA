* Modelado de una red neuronal

  - Matriz tridimencional: w_{i, j, n} es el valor de w_{i,j} para las i
    cada salida del nivel n y j para cada entrada al nivel n+1
  - Matriz bidimencional: u_{i,j} con los umbrales o bias de la neurona j en el
    nivel i
  - g es la función de activación

  - Helpers:

      rows = @(A)(size(A)(1));
      cols = @(A)(size(A)(2));
      depth = @(A)(size(A)(3));

  - Armar una red desde W y U:

    function W = build_network(W, U)
      W(:,cols(W)+1,:) = U;    # When I wrote this it felt funny but right.
                               # Now it's just funny.
    endfunction

  - Funciones de activación:

      step = @(x)(((x >= 0) .- 0.5) .* 2);

  - Respuesta de una red con recuerdos de los pasos intermedios

      function V, H = run_network(W, g, E)
        V = O;
        H = [];
        O = E;
        for i=1:depth(W)                         # For each layer of the network
            w = W(:,:,i);                        # using the weight matrix
            h = w * [O; (zeros(1, cols(O)).-1)]; # Add the threshold -1 row at the end
            O = g(h);                            # get the output vector
            V = [V, O];
            H = [H h];
        endfor
      endfunction

  - Learning:

      function W = get_random_w(levels, neurons_in_level, abs_cap = 0.3)

        # This function 
        cap = @(R)(R.-0.5).*abs_cap.*2;

        W = zeros(neurons_in_level, neurons_in_level, levels);
        W(1,:,levels) = ones(1, levels);
        W(:,:,levels-1) = cap(rand(neurons_in_level, neurons_in_level, levels-1));
        W = build_network(W, (cap(rand(size(W)(1,3)))));
      endfunction

      function W, U = backpropagation_learning(W, U, V, H, gp, S, eta)

        levels = size(W)(3);

        # First step of the backpropagation
        last_delta = gp(H(:,levels)) .* (S-V(:,levels));

        for level = levels-1:-1:1

          current_w = W(:,:,level);
          last_delta = gp(H(:,level)) .* current_w * last_delta;
          W(:,:,level) = current_w + eta .* last_delta * V(:, level)';

        endfor
      endfunction


















