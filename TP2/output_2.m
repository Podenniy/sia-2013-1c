% load('TimeSerie_G1.mat');
% dataset_2 = [];
% x = x ./ 4;
% for i=1:800
%   dataset_2 = [dataset_2, x(i:i+2)'];
% end
% expected_2 = x(4:803);
% 
% cap = 0.6;
% error_cap = 0.025;
% W = learn(dataset_2, expected_2, get_random_w([3 10 6 1], cap), 0.2, @tanh, @(x)(sech(x).^2), cap, 0.3, error_cap);
% 

load('TimeSerie_G1.mat');
test_set = [];
x = x ./ 4;

inputs = 3;
start = 800;

for i=start:size(x, 2) - inputs - 1
  test_set = [test_set, x(i:i+inputs-1)'];
end
expected_values = x(start + inputs:start + inputs + size(test_set, 2));

W = {};

W.A = [ -0.0348   -2.4187    2.1858   -1.3392 ;
    0.0069   -0.2666    0.2029   -0.0237 ;
   -0.0397   -2.2884    2.2753    3.7301 ;
    0.0568   -2.8457    2.8557   -3.4218 ; 
   -0.0156    2.2084   -2.3290    0.8763 ;
   -0.1125    0.4844   -0.2617    0.0454 ;
   -0.0271    2.2384   -1.7379   -0.7537 ;
    0.1123   -0.3620    0.2982   -0.0197 ; 
    0.0042   -1.7570    2.3634    0.6870 ;
   -0.0257   -1.6156    1.4635    0.3422 ];

W.B = [
  0.6131   -0.3137   -2.1096   -0.4937   -0.6123    0.6136   -0.5199   -0.4162   -0.0833    0.0260    0.0900 ;
   -0.2183    0.2877    0.1668    0.2326    0.2216    0.0511   -0.2138    0.3270    0.0798   -0.1319   -0.1411 ; 
    1.2724   -0.0102    1.7178   -0.6992   -1.6446    0.0370   -0.4767   -0.0042    0.3520    0.0740    0.0961 ;
   -0.4478    0.1948    0.5109    0.2182    0.1203   -0.5604    0.2251    0.3856    0.0262   -0.2138   -0.1103 ;
    0.0068   -0.1084   -0.6088   -3.2893    0.1963    0.1478    1.1743   -0.0797   -1.4204   -0.9451    0.6738 ;
   -1.9308    0.0430    2.3462   -0.9067    1.7877   -0.0774   -1.7013    0.0245    1.7542    0.9496   -2.8148 ];

W.C = [ 1.0390   -0.1130   -1.9096    0.0210   -1.5582    1.6913    0.8813 ];

name = lvl(size(fieldnames(W), 1) + 1);
err = [];
for i = 1 : size(test_set, 2)
  out = run_neural_network(W, test_set(:,i), @tanh);
  err = [err norm(out.V.(name) - expected_values(i))];
end

figure(1); plot(err);
disp(mean(err));

