% Run the learn algorithm.

W = get_random_w([2, 6, 4, 1], 0.3);

params_0 = struct(...
  'eta', 0.5, ...
  'alpha', 0.1, ...
  'noise_factor', 0.0001, ...
  'hard_limit', 1500, ...
  'adaptative_increment', 0.1, ...
  'adaptative_decrement', 0.001, ...
  'debug', true ...
);
data_0 = execute_learn_algorithm(W, [6, 4, 1], @tanh, @(x)(sech(x).^2), 2, params_0);
save('alpha_0_1_data_result.m', ['data_0']);

params_1 = struct(...
  'eta', 0.5, ...
  'alpha', 0.3, ...
  'noise_factor', 0.0001, ...
  'hard_limit', 1500, ...
  'adaptative_increment', 0.1, ...
  'adaptative_decrement', 0.001, ...
  'debug', true ...
);
data_1 = execute_learn_algorithm(W, [6, 4, 1], g, gp, 2, params_1);
save('alpha_0_3_data_result.m', ['data_1']);

params_2 = struct(...
  'eta', 0.5, ...
  'alpha', 0.5, ...
  'noise_factor', 0.0001, ...
  'hard_limit', 1500, ...
  'adaptative_increment', 0.1, ...
  'adaptative_decrement', 0.001, ...
  'debug', true ...
);
data_2 = execute_learn_algorithm(W, [6, 4, 1], g, gp, 2, params_2);
save('alpha_0_5_data_result.m', ['data_2']);

params_3 = struct(...
  'eta', 0.5, ...
  'alpha', 0.7, ...
  'noise_factor', 0.0001, ...
  'hard_limit', 1500, ...
  'adaptative_increment', 0.1, ...
  'adaptative_decrement', 0.001, ...
  'debug', true ...
);
data_3 = execute_learn_algorithm(W, [6, 4, 1], g, gp, 2, params_3);
save('alpha_0_7_data_result.m', ['data_3']);

params_4 = struct(...
  'eta', 0.5, ...
  'alpha', 0.9, ...
  'noise_factor', 0.0001, ...
  'hard_limit', 1500, ...
  'adaptative_increment', 0.1, ...
  'adaptative_decrement', 0.001, ...
  'debug', true ...
);
data_4 = execute_learn_algorithm(W, [6, 4, 1], g, gp, 2, params_4);
save('alpha_0_9_data_result.m', ['data_4']);
